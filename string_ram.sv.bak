module string_ram (in, out, clk, we, str_out, flag, clear, rst);

input logic clk, we, flag, clear;
input logic [7:0] in;
input logic [$clog2(80)-1:0] str_in, str_out;
logic [3:0] gnd=0;
output logic [7:0] out;
logic [$clog2(80)-1:0] clear_count = 0;
logic [7:0] data;

simple_dual_port_ram_single_clock #(.DATA_WIDTH(8), ADDR_WIDTH(7)) string_ram(.data(data), .read_addr(str_out), .write_addr(count_str), .we(flag), .clk(clk), .q(out));

always_comb	case(state)
					save: nextstate = (clear) ? clear: save;
					clear: nextstate = (str_Clear_flag) ? save : clear;
					
always_ff @(posedge clk, posedge rst)
	if (rst) state <= init;
	else state <= nextstate;

always_ff @(posedge clk) begin
	if (state != nextstate) clear_count <= 0;
	else if (state == nextstate & clear_count < 79) clear_count <= clear_count + 1;
	else if (state == nextstate) clear_count = 0;
	
	
assign data = (state==save) ? in : 0;
assign overload = (clear_count == 79) ? 1 : 0;

endmodule